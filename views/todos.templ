//go:generate templ generate
package views

import (
    "go-crud-app/models"
    "strconv"
    "fmt"
    "go-crud-app/components/button"
    "go-crud-app/components/input"
    "go-crud-app/components/pagination"
)

// Import button constants
import (
    . "go-crud-app/components/button"
)

templ Todos(todos []models.Todo, paginationData models.PaginationData) {
    <html>
        <head>
            <title>Todos</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
            <script defer src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.3/cdn.min.js"></script>
            <style>
                /* TemplUI CSS Variables */
                :root {
                    --primary: 222.2 84% 4.9%;
                    --primary-foreground: 210 40% 98%;
                    --background: 0 0% 100%;
                    --foreground: 222.2 84% 4.9%;
                    --muted: 210 40% 96%;
                    --muted-foreground: 215.4 16.3% 46.9%;
                    --border: 214.3 31.8% 91.4%;
                    --ring: 222.2 84% 4.9%;
                }

                .border-primary { border-color: hsl(var(--primary)); }
                .bg-background { background-color: hsl(var(--background)); }
                .text-primary-foreground { color: hsl(var(--primary-foreground)); }
                .bg-primary { background-color: hsl(var(--primary)); }
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }

                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(10px);
                    border-radius: 20px;
                    padding: 40px;
                    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                }

                h1 {
                    text-align: center;
                    color: #333;
                    margin-bottom: 30px;
                    font-size: 2.5rem;
                    font-weight: 700;
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                }

                .add-form {
                    margin-bottom: 30px;
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 15px;
                    border: 2px solid #e9ecef;
                }

                /* TemplUI components handle their own styling */

                .btn {
                    padding: 12px 24px;
                    border: none;
                    border-radius: 10px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }

                .btn-primary {
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    color: white;
                }

                .btn-primary:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
                }

                .btn-danger {
                    background: linear-gradient(135deg, #ff6b6b, #ee5a52);
                    color: white;
                    padding: 6px 12px;
                    font-size: 12px;
                    margin-left: 10px;
                }

                .btn-danger:hover {
                    transform: translateY(-1px);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
                }

                .todo-list {
                    list-style: none;
                }

                .todo-item {
                    background: white;
                    margin-bottom: 12px;
                    padding: 20px;
                    border-radius: 12px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                    border: 1px solid #e9ecef;
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    transition: all 0.3s ease;
                }

                .todo-item:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
                }

                .todo-item.completed {
                    opacity: 0.7;
                    background: #f8f9fa;
                }

                .todo-item.completed .todo-text {
                    text-decoration: line-through;
                    color: #6c757d;
                }

                .fade-in {
                    animation: fadeIn 0.5s ease-in;
                }

                .fade-out {
                    animation: fadeOut 0.3s ease-out forwards;
                }

                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(-10px); }
                    to { opacity: 1; transform: translateY(0); }
                }

                @keyframes fadeOut {
                    from { opacity: 1; transform: translateY(0); }
                    to { opacity: 0; transform: translateY(-10px); }
                }

                .loading {
                    opacity: 0.6;
                    pointer-events: none;
                }

                .btn:disabled {
                    opacity: 0.6;
                    cursor: not-allowed;
                }

                .todo-content {
                    display: flex;
                    align-items: center;
                    gap: 15px;
                    flex: 1;
                }

                .todo-text {
                    font-size: 16px;
                    color: #333;
                    font-weight: 500;
                }

                .status-icon {
                    font-size: 20px;
                    min-width: 24px;
                }

                .btn-toggle {
                    background: none;
                    border: none;
                    font-size: 20px;
                    cursor: pointer;
                    padding: 5px;
                    border-radius: 8px;
                    transition: all 0.3s ease;
                    min-width: 32px;
                    height: 32px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }

                .btn-toggle:hover {
                    background: rgba(102, 126, 234, 0.1);
                    transform: scale(1.1);
                }

                .todo-actions {
                    display: flex;
                    gap: 10px;
                    align-items: center;
                }

                .empty-state {
                    text-align: center;
                    padding: 60px 20px;
                    color: #6c757d;
                }

                .empty-state h3 {
                    font-size: 1.5rem;
                    margin-bottom: 10px;
                    color: #495057;
                }

                @media (max-width: 768px) {
                    .container {
                        margin: 10px;
                        padding: 20px;
                    }

                    h1 {
                        font-size: 2rem;
                    }

                    .add-form {
                        flex-direction: column;
                    }

                    .todo-item {
                        flex-direction: column;
                        align-items: flex-start;
                        gap: 15px;
                    }

                    .todo-content {
                        width: 100%;
                    }
                }
            </style>
        </head>
        <body x-data="todoApp()">
            <div class="container">
            <h1>My Todo List</h1>
            <form action="/create" method="POST" class="add-form">
                <div class="flex gap-3 items-center">
                    @input.Input(input.Props{
                        ID: "task",
                        Name: "task",
                        Type: input.TypeText,
                        Required: true,
                        Placeholder: "What needs to be done?",
                        Class: "flex-1",
                    })
                    @button.Button(button.Props{
                        Type: TypeSubmit,
                        Variant: VariantDefault,
                    }) {
                        Add Task
                    }
                </div>
            </form>
            <ul class="todo-list">
                for _, todo := range todos {
                    <li class="todo-item fade-in"
                        x-bind:class="{ 'completed': false }"
                        x-data={ fmt.Sprintf("{ completed: %t, deleting: false, toggling: false }", todo.Done) }>
                        <div class="todo-content">
                            <form action="/toggle" method="POST" style="display: inline;"
                                  x-on:submit="toggling = true"
                                  x-bind:class="{ 'loading': toggling }">
                                <input type="hidden" name="id" value={ strconv.Itoa(todo.ID) }/>
                                @button.Button(button.Props{
                                    Type: TypeSubmit,
                                    Variant: VariantGhost,
                                    Size: SizeIcon,
                                    Class: "p-2",
                                    Attributes: templ.Attributes{
                                        "title": "Toggle completion",
                                        "x-bind:disabled": "toggling || deleting",
                                    },
                                }) {
                                    if todo.Done {
                                        ✅
                                    } else {
                                        ☐
                                    }
                                }
                            </form>
                            <span class="todo-text" x-bind:class="{ 'completed': completed }">{ todo.Task }</span>
                        </div>
                        <div class="todo-actions">
                            <form action="/delete" method="POST" style="display: inline;"
                                  x-on:submit="deleting = true; $el.closest('.todo-item').classList.add('fade-out')">
                                <input type="hidden" name="id" value={ strconv.Itoa(todo.ID) }/>
                                @button.Button(button.Props{
                                    Type: TypeSubmit,
                                    Variant: VariantDestructive,
                                    Class: "btn btn-danger",
                                    Attributes: templ.Attributes{
                                        "x-bind:disabled": "deleting || toggling",
                                    },
                                }) {
                                    <span x-show="!deleting">Delete</span>
                                    <span x-show="deleting">Deleting...</span>
                                }
                            </form>
                        </div>
                    </li>
                }
            </ul>
            if len(todos) == 0 {
                <div class="empty-state" x-show="true" x-transition>
                    <h3>No todos yet!</h3>
                    <p>Add your first task above to get started.</p>
                </div>
            } else if paginationData.TotalPages > 1 {
                <!-- Dynamic Pagination -->
                <div class="mt-8">
                    @pagination.Pagination() {
                        @pagination.Content() {
                            @pagination.Item() {
                                @pagination.Previous(pagination.PreviousProps{
                                    Disabled: !paginationData.HasPrevious,
                                    Href: fmt.Sprintf("/?page=%d", paginationData.PreviousPage),
                                    Label: "Previous",
                                })
                            }
                            for i := 1; i <= paginationData.TotalPages; i++ {
                                @pagination.Item() {
                                    @pagination.Link(pagination.LinkProps{
                                        IsActive: i == paginationData.CurrentPage,
                                        Href: fmt.Sprintf("/?page=%d", i),
                                    }) {
                                        { strconv.Itoa(i) }
                                    }
                                }
                            }
                            @pagination.Item() {
                                @pagination.Next(pagination.NextProps{
                                    Disabled: !paginationData.HasNext,
                                    Href: fmt.Sprintf("/?page=%d", paginationData.NextPage),
                                    Label: "Next",
                                })
                            }
                        }
                    }
                </div>
            }
            </div>

            <script>
                function todoApp() {
                    return {
                        isSubmitting: false,

                        init() {
                            // Reset form state after page load
                            this.isSubmitting = false;
                        }
                    }
                }
            </script>
        </body>
    </html>
}
